--||Z Analysis Report:--
--SQL Tuning Control:
SELECT /*+parallel (8) */	 st.sql_text, sub.sql_id, sub.ELAPSED_TIME PER_EXEC_ELAPSED_TIME_SECONDS,EXECUTIONS FROM DBA_HIST_SQLTEXT st, GV$SQLAREA area,( SELECT t.sql_id,ROUND (SUM (t.elapsed_time_delta / 1000000)/ SUM 
(t.executions_delta))ELAPSED_TIME FROM dba_hist_sqlstat t, dba_hist_snapshot s, DBA_HIST_SQLTEXT st WHERE t.snap_id = s.snap_id AND t.dbid = s.dbid AND t.instance_number = s.instance_number AND t.executions_delta > 0 AND s.BEGIN_INTERVAL_TIME>=trunc(sysdate)
--AND s.BEGIN_INTERVAL_TIME >TO_DATE ('15/02/2020 00:00:00','dd/mm/yyyy hh24:mi:ss')
--AND END_INTERVAL_TIME <TO_DATE ('18/02/2020 08:01:00','dd/mm/yyyy hh24:mi:ss')
GROUP BY t.sql_id ORDER BY 2 DESC) sub WHERE sub.sql_id = st.sql_id and sub.sql_id=area.sql_id(+) ORDER BY PER_EXEC_ELAPSED_TIME_SECONDS desc,EXECUTIONS DESC;

 --SQL Tuning Control-2: Daha yakışıklı oldu çünkü bizim efsane sorgu üzerine inşaa edildi.
 --Bugün içerisinde, 20 dklık intervallerin gün içerisindeki ortalama süresi(20 dklık intervalde 10 kereden fazla çalışanlar için):
select sql_id,avg(sure)"CALISMA_BASINA_ORTALAMA_SURE" from (SELECT DISTINCT sql_id,TO_CHAR (sql_text) "SQL_TEXT",begin_interval_time,end_interval_time,toplam_sure,execution_count,toplam_sure / execution_count sure FROM (SELECT a.sql_id,
c.sql_text,begin_interval_time,end_interval_time,ROUND (a.elapsed_time_delta / (1000000), 2) toplam_sure,a.executions_delta execution_count,ROUND (a.elapsed_time_delta/ (1000000 * DECODE (a.executions_delta, 0, 0.0000001)),6)sure FROM dba_hist_sqlstat a
,dba_hist_snapshot b, gv$sql c WHERE     a.snap_id = b.snap_id AND a.instance_number = b.instance_number AND a.sql_id = c.sql_id(+)) WHERE execution_count != 0 ORDER BY begin_interval_time DESC) where 1=1 and begin_interval_time>=trunc(sysdate)
--and sql_id='401aaupjgy0zd'
and execution_count>10 group by sql_id order by 2 desc;

--SQL_ID bazında çalışma süresi kontrolü:
select to_char(begin_interval_time,'dd-mm-yyyy hh24:mi:ss') TIME,round(ELAPSED_TIME_delta/1000000/greatest(executions_delta,1),4) "avg duration (sec)",abs(extract(minute from (end_interval_time-begin_interval_time)) + extract(hour from (end_interval_time-begin_interval_time))*60 + extract(day from (end_interval_time-begin_interval_time))*24*60) 
minutes,executions_delta executions,sql_id,a.plan_hash_value,a.instance_number inst_id,(select PARSING_SCHEMA_NAME from gv$sql where sql_id = a.sql_id and rownum = 1) SCHEMA,(select dbms_lob.substr(sql_text,4000,1) from gv$sql where sql_id = a.sql_id and rownum = 1) SQL_TEXT from dba_hist_SQLSTAT a, dba_hist_snapshot b 
where sql_id='031su891d12dx' and a.snap_id=b.snap_id and a.instance_number=b.instance_number and begin_interval_time>sysdate-7 order by a.snap_id desc, a.instance_number;

--Chain_cnt => Update'ler yüzünden fragmente olmuş 
--Tablodaki satır sayısının %10'undan fazla görüyorsan o table yalan olur. 
select * from   dba_tab_statistics where 1=1 and chain_cnt is not null and chain_cnt<>0 order by chain_cnt desc;

--Burada sql+PL/SQL+java toplamı ne kadar iş yaptığını göteriyor. DB en çok nerelere zaman harcıyor anlamak için
--Bunun session bazlı versiyonu da var: v$sess_time_model. Bu sayede hangi session çok CPU yemiş ya da DB time yaratmış görebilirsin. (Value alanı milisaniye her zaman olduğu gibi) 
select * from   gv$sys_time_model order by value desc;

--Bu view üzerinden cpu_time'a göre en çok uzun sürenleri görebilirsin. Buradan sql_id al, sonra yine Onur'un sorguya filtre et. (Birim milisaniye)
select sql_id,cpu_time,sql_text from   v$sqlstats order by cpu_time desc;

--Bloklanan(yoğunluk oluşturan) sessionlar: Bu kısa vadeli bilindiği üzere. session history geçmişine bakılabilir daha eskiye dönük analizler için.
select blocking_Session,sid,serial# ,sql_id from gv$session a where blocking_Session is not null;

--DB'lerinde günlük execution plan costu yüksek sorgular nelermiş sorgusu:
select distinct SQL_ID,  cast(avg(COST)as int)"COST",count(sql_id)  from gV$SQL_PLAN where 1=1 and cost is not null group by SQL_ID order by 2 desc;

--User bazlı audit tablomuz. Dünden beri Link ile gelenleri de, onların attığı sorguları da gösteriyor:
select *  from   dba_audit_trail where 1=1 and timestamp>sysdate-1
--and username='DWHUSER'
order by timestamp desc;

--Genel uzun süren sorgu kontrolü:
select sql_id,max(avg_sec) from	(select /*+parallel (4) */ to_char(begin_interval_time,'dd-mm-yyyy hh24:mi:ss') TIME,round(ELAPSED_TIME_delta/1000000/greatest(executions_delta,1),4) "AVG_SEC",abs(extract(minute from (end_interval_time-begin_interval_time))
+ extract(hour from (end_interval_time-begin_interval_time))*60 + extract(day from (end_interval_time-begin_interval_time))*24*60) minutes,executions_delta executions,sql_id,a.plan_hash_value,a.instance_number inst_id,a.snap_id from dba_hist_SQLSTAT a
,dba_hist_snapshot b where a.snap_id=b.snap_id and a.instance_number=b.instance_number and begin_interval_time>=trunc(sysdate)) group by sql_id order by 2 desc;

--TOP Elapsed time SQL in certain hours with below script. 
SELECT st.sql_text, sub.sql_id, sub.ELAPSED_TIME PER_EXEC_ELAPSED_TIME_MINUTES FROM DBA_HIST_SQLTEXT st,(SELECT t.sql_id,ROUND (SUM (t.elapsed_time_delta / 60000000)/ SUM (t.executions_delta))ELAPSED_TIME FROM dba_hist_sqlstat t,
dba_hist_snapshot s, DBA_HIST_SQLTEXT st WHERE t.snap_id = s.snap_id AND t.dbid = s.dbid AND t.instance_number = s.instance_number AND t.executions_delta > 0
AND s.BEGIN_INTERVAL_TIME >TO_DATE ('19/11/2023 13:00:00','dd/mm/yyyy hh24:mi:ss')
AND END_INTERVAL_TIME <TO_DATE ('19/11/2023 16:01:00','dd/mm/yyyy hh24:mi:ss')
GROUP BY t.sql_id ORDER BY 2 DESC) sub WHERE sub.sql_id = st.sql_id ORDER BY 3 DESC;

--CPU tüketimini awr verilerinden kontrol edebiliyoruz: CPU tüketiminin yüzdesel bazda ne kadar ağırlığı olmuş
select instance_number,round(round(x.average)/10)*10 "%CPU(avg)",count(1) snapshot_count from dba_hist_sysmetric_summary x where 1=1    
and metric_name='Host CPU Utilization (%)'
and begin_time>=to_date ('03-12-2023 00:00:00', 'dd-mm-yyyy hh24:mi:ss')
and end_time<to_date ('04-12-2023 00:00:00', 'dd-mm-yyyy hh24:mi:ss')    
group by instance_number,round(round(x.average)/10)*10 order by 1,3 desc;

--TOP CPU SQL for last 24 hours with following script.
select /*+parallel (8) */ * from (select ss.sql_text,a.SQL_ID, sum(CPU_TIME_DELTA),sum(DISK_READS_DELTA),count(*)from DBA_HIST_SQLSTAT a, dba_hist_snapshot s,v$sql ss where s.snap_id = a.snap_id and a.sql_id=ss.sql_id and s.begin_interval_time > sysdate -1
group by ss.sql_text,a.SQL_ID order by sum(CPU_TIME_DELTA) desc) where rownum<20;

--TOP IO SQL for last 24 hours with following script.
select * from  (SELECT /*+LEADING(x h) USE_NL(h)*/ h.sql_id ,SUM(10) ash_secs FROM   dba_hist_snapshot x,dba_hist_active_sess_history h WHERE   x.begin_interval_time > sysdate -1 AND h.SNAP_id = X.SNAP_id AND h.dbid = x.dbid AND h.instance_number
= x.instance_number AND    h.event in  ('db file sequential read','db file scattered read') GROUP BY h.sql_id ORDER BY ash_secs desc) where rownum<10;

--TOP 10 SQL for last 1 hour with following script.
select * from (select active_session_history.sql_id,dba_users.username,sqlarea.sql_text,sum(active_session_history.wait_time +active_session_history.time_waited) ttl_wait_time from v$active_session_history active_session_history,v$sqlarea sqlarea,dba_users
where active_session_history.sample_time between sysdate -  1/24  and sysdate and active_session_history.sql_id = sqlarea.sql_id and active_session_history.user_id = dba_users.user_id group by active_session_history.sql_id,sqlarea.sql_text, dba_users.username
order by 4 desc) where rownum <11;

--Top Oracle database wait events in Cache which is v$ queries with below script.
select  wait_class, sum(total_waits), sum(time_waited) from gv$session_wait_class where wait_class !='Idle' group by wait_class order by 3 desc;

--Top Oracle database wait events from Active session history which is v$active_session_history queries with below script.
select * from (select active_session_history.event,sum(active_session_history.wait_time +active_session_history.time_waited) ttl_wait_time from gv$active_session_history active_session_history where active_session_history.event is not null
group by active_session_history.event order by 2 desc)where rownum <= 10;

--Top Oracle database wait events at specific intervals. You should type date and SNAP_ID
--Buradan snap_id al aşağıdakine filtre ver, bu sayade manual AWR gör!
select snap_id,INSTANCE_NUMBER,begin_interval_time,end_interval_time from dba_hist_snapshot where 1=1		
and begin_interval_time>=to_date ('20-11-2023 04:00:00', 'dd-mm-yyyy hh24:mi:ss')
and end_interval_time<=to_date ('20-11-2023 09:00:00', 'dd-mm-yyyy hh24:mi:ss') order by 3;

--Manual AWR:
select * from (select active_session_history.event,sum(active_session_history.wait_time+active_session_history.time_waited) ttl_wait_time from dba_hist_active_sess_history active_session_history where event is not null
and SNAP_ID between 143841 and 143869 
group by active_session_history.event order by 2 desc) where rownum<10;

--Lock olan objectlerin hepsini(tablo seviyesinde) burdan da görebiliyoruz: 
--Uzun süren veya bitmeyen update/delete işlerinde bakabilirsin:
select * from  gv$locked_object;

-- For which SQL is currently waiting on:
select sid,sql_text from gv$session s, gv$sql q where 1=1 and sid in (select sid from gv$session where state in ('WAITING') and wait_class != 'Idle'and event='enq: TX - row lock contention' and (q.sql_id = s.sql_id or q.sql_id = s.prev_sql_id));

--Last checkpoint time?
select checkpoint_time, a.* from	v$datafile_header a order by 1 desc;

--DB Commit Size:
select cast((DB_BLOCK_SIZE/AVG)*MULTIBLOCK_READ_COUNT as int)"COMMIT_SIZE" from (select * from  (select value"DB_BLOCK_SIZE" from v$parameter where name='db_block_size') a, (select avg(avg_row_len)"AVG" from   dba_tables) b,
(select value"MULTIBLOCK_READ_COUNT" from   v$parameter where name='db_file_multiblock_read_count') c);

--Query v$transaction on each node to see uncommitted sessions:  
select * from   gv$transaction;

--Shows non-waiting sessions holding locks being waited-on
select * from   DBA_BLOCKERS;

--Shows all DDL locks held or being requested
select * from   DBA_DDL_LOCKS;

--Shows all DML locks held or being requested
select * from   DBA_DML_LOCKS;

--Shows all sessions waiting on, but not holding waited for locks
select * from   DBA_WAITERS;

--Show all sessions waiting for any lock:
select event,p1,p2,p3 from gv$session_wait where wait_time=0 and event='enqueue';

--DB'den yapılan insert/update/delete ve truncate adetlerini gösteriyor. DB'yi tanımak için ideal analiz:
select * from   dba_tab_modifications where 1=1   
--and table_owner in ('CBF','BAS','PHS')
order by inserts desc,updates desc,deletes desc;

--Update/Delete yüzünden dağılmış, fragmantasyon manyağı olmuş sorgular.
--0'a yakın olmasını bekleriz. 1000 falan olduysa dağılmıştır.
select CHAIN_CNT, a.* from   dba_all_tables a where 1=1   
--and owner in ('CBF','BAS','PHS')
and CHAIN_CNT is not null order by a.CHAIN_CNT desc;

--Bir kodu (update mesela) cancel ettigimizde asagidaki kod ile rollback'in bitip bitmedigini görebiliyoruz. Yeni processe(update'e mesela) hazir olup olmadigini görebiliyoruz.
--Eğer bir session'ı kill ediyorsan, ya da disconnect session basıyorsan(ki sunucu üstünden pid ile kill etmekle aynı) ve gitmiyorsa KILLED olarak kalıyorsa tabloda rollback vardır. Onu bekliyordur:
SELECT logon_time,ORACLE_USERNAME,O.OWNER,O.OBJECT_NAME,sql_id,l.inst_id,SID,S.serial#,P.SPID OS_PID,DECODE(L.LOCKED_MODE, 0,'NONE',1,'NULL',2,'ROW SHARE',3,'ROW EXCLUSIVE',4,'SHARE',5,'SHARE ROW EXCLUSIVE',6,'EXCLUSIVE',
NULL) LOCK_MODE FROM sys.GV_$LOCKED_OBJECT L, DBA_OBJECTS O, sys.GV_$SESSION S, sys.GV_$PROCESS P WHERE L.OBJECT_ID = O.OBJECT_ID and l.inst_id = s.inst_id AND L.SESSION_ID = S.SID and s.inst_id = p.inst_id AND S.PADDR = P.ADDR(+) order by 3,1 desc;

--Müslüm diye bir hıyar varmış burda :)
SELECT LOGON_TIME,TRUNC(PGA_USED_MEM/1000000) AS MB_USED,STATUS,SID,INST_ID,PADDR,PRO.PROGRAM,SES.USERNAME,OSUSER,SCHEMANAME,MACHINE,SES.PROGRAM,SQL_ID,CLIENT_INFO,CLIENT_IDENTIFIER FROM GV$SESSION SES,V$PROCESS PRO
WHERE 1=1 AND PRO.ADDR=SES.PADDR AND PGA_USED_MEM>=15000000 /*10 MB*/
--AND SCHEMANAME NOT IN ('SYS','GOLDENG','PHS','CBF','BAS','APSATL','ADM')
ORDER BY PGA_USED_MEM DESC;

--Index contention tespit - 1 // Dakika bazli bekleme yapan 
select trunc(sample_time)"DATE",to_char(sample_time, 'hh24:mi')"MINUTE_INTERVAL",count(1) from gv$active_session_history where 1=1 and sample_time>=trunc(sysdate) and event like 'enq: TX - index contention'
group by trunc(sample_time),to_char(sample_time, 'hh24:mi') order by 1 desc, 2 desc;

--Index contention tespit - 2 // Session bazinda detay:
select a.sample_time,a.session_id,a.session_type,a.sql_opname,a.session_state,a.program,a.module,a.machine,b.PARSING_SCHEMA_NAME,a.sql_id,b.sql_text,time_waited from gv$active_session_history a, gv$sql b
where 1=1 and sample_time>=trunc(sysdate) and a.sql_id=b.sql_id(+) and event like 'enq: TX - index contention' and session_state='WAITING' order by time_waited desc;

--Düzeltilmesi gereken B(+) tree indexler. Normal default değeri blevel=0:
select BLEVEL, OWNER, INDEX_NAME, INDEX_TYPE, TABLE_OWNER, TABLE_NAME, TABLE_TYPE, UNIQUENESS from dba_indexes a  where 1=1 and blevel>3 order by blevel desc;

--Çağırılan prosedürlerin hangi variable ile çağrıldığı. Öncesinde SYS.V_$SQL'den çağırılan kodu ve SQL ID'yi al
select NAME,POSITION,DATATYPE_STRING,VALUE_STRING from   v$sql_bind_capture where 1=1 and sql_id='gzzw98szps00k'; 

--Belirli bir tarihten itibaren, belirli tabloara gelen insertlerin ne kadar sürdüğünü incelemek için:
select to_char (BEGIN_INTERVAL_TIME, 'yyyymmdd hh24') ,avg(TOPLAM_SURE), avg(EXECUTION_COUNT), avg(SURE) from   (
select distinct sql_id,to_char(substr(SQL_FULLTEXT,1,150))"SQL_TEXT",begin_interval_time,end_interval_time,toplam_sure,execution_count,toplam_sure/execution_count sure from
(select a.sql_id,c.sql_fulltext,begin_interval_time,end_interval_time,round(a.elapsed_time_delta/(1000000),2) toplam_sure,
a.executions_delta execution_count,round(a.elapsed_time_delta/(1000000*decode(a.executions_delta,0,0.0000001)),6) sure 
from dba_hist_sqlstat a,dba_hist_snapshot b, gv$sql c where a.snap_id=b.snap_id and a.instance_number=b.instance_number and a.sql_id=c.sql_id(+)
--and  a.sql_id='bbr7zcah4j0f7'
) where 1=1 and execution_count!=0
and BEGIN_INTERVAL_TIME>=to_date ('25-03-2019 00:00:00', 'dd-mm-yyyy hh24:mi:ss')
--and BEGIN_INTERVAL_TIME<=to_date ('01-04-2019 13:00:00', 'dd-mm-yyyy hh24:mi:ss') 
and substr(SQL_FULLTEXT,1,150) like 'INSERT INTO%'
and (substr(SQL_FULLTEXT,1,150) like '%EDR_BI_MASTER%' or substr(SQL_FULLTEXT,1,150) like '%EDR_BT_MASTER%')
--order by 7 desc
) group by to_char (BEGIN_INTERVAL_TIME, 'yyyymmdd hh24') order by 1 desc;

---------DBA notes---------------

-- session bazlı 20MB den büyük pga kullanan session bilgisini verir 
select s.inst_id, s.sid,s.sql_id, s.username, s.logon_time, s.program, PGA_USED_MEM/1024/1024 PGA_USED_MEM, PGA_ALLOC_MEM/1024/1024 PGA_ALLOC_MEM from gv$session s, gv$process p Where s.paddr = p.addr and s.inst_id = p.inst_id
--and s.sql_id='ff7m27dtpj9xs'
and PGA_USED_MEM/1024/1024>20 order by PGA_USED_MEM;
 
--- instance bazlı toplam pga kullanım miktarnı verir  
select s.inst_id, sum(PGA_USED_MEM/1024/1024/1024) TOTAL_PGA_USED_MEM, sum(PGA_ALLOC_MEM/1024/1024/1024) TOTAL_PGA_ALLOC_MEM from gv$session s, gv$process p Where s.paddr = p.addr
--and s.inst_id = p.inst_id
--and s.sql_id='ff7m27dtpj9xs'
group by S.INST_ID order by 2 desc;
 
 --Session bazlı pga kullanımını verir: 
SELECT LOGON_TIME,SID, GV$SESSION.INST_ID, gv$session.SERIAL#, gv$process.SPID , ROUND(gv$process.pga_used_mem/(1024*1024), 2) PGA_MB_USED,gv$session.USERNAME, STATUS, OSUSER, MACHINE, gv$session.PROGRAM, MODULE 
FROM gv$session, gv$process WHERE gv$session.paddr = gv$process.addr and GV$SESSION.INST_ID=GV$PROCESS.INST_ID ORDER BY pga_used_mem DESC;